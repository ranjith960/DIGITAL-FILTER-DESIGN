module FIR_Filter #(
    parameter N = 4,                   // Filter order (number of taps)
    parameter WIDTH = 16               // Bit width of the input/output
)(
    input clk,                         // Clock signal
    input reset,                       // Reset signal
    input [WIDTH-1:0] data_in,         // Input data
    output reg [WIDTH-1:0] data_out    // Output data
);
    // Filter coefficients (example: 4-tap filter)
    reg [WIDTH-1:0] coeffs [0:N-1];    // Coefficients of the filter
    reg [WIDTH-1:0] shift_reg [0:N-1];  // Shift registers for input data

    // Initialize filter coefficients (example values for a low-pass filter)
    initial begin
        coeffs[0] = 16'h1000;   // Coefficient for tap 0
        coeffs[1] = 16'h2000;   // Coefficient for tap 1
        coeffs[2] = 16'h2000;   // Coefficient for tap 2
        coeffs[3] = 16'h1000;   // Coefficient for tap 3
    end

    integer i;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset shift registers
            for (i = 0; i < N; i = i + 1) begin
                shift_reg[i] <= 0;
            end
            data_out <= 0;
        end else begin
            // Shift input data through the registers
            for (i = N-1; i > 0; i = i - 1) begin
                shift_reg[i] <= shift_reg[i-1];
            end
            shift_reg[0] <= data_in;  // Insert new input at the first register

            // Compute the output by multiplying inputs with coefficients and summing
            data_out <= 0;
            for (i = 0; i < N; i = i + 1) begin
                data_out <= data_out + shift_reg[i] * coeffs[i];  // MAC operation
            end
        end
    end
endmodule
  

testbench
module FIR_Filter_tb;

    // Testbench signals
    reg clk;
    reg reset;
    reg [15:0] data_in; // Input data
    wire [15:0] data_out; // Output data

    // Instantiate the FIR filter
    FIR_Filter #(
        .N(4),              // 4-tap filter
        .WIDTH(16)          // 16-bit width
    ) uut (
        .clk(clk),
        .reset(reset),
        .data_in(data_in),
        .data_out(data_out)
    );

    // Clock generation
    always begin
        #5 clk = ~clk; // 100 MHz clock
    end

    // Test sequence
    initial begin
        // Initialize signals
        clk = 0;
        reset = 0;
        data_in = 16'h0000;

        // Apply reset
        reset = 1;
        #10;
        reset = 0;

        // Apply input data
        data_in = 16'h0001; #10; // data_in = 1
        data_in = 16'h0002; #10; // data_in = 2
        data_in = 16'h0003; #10; // data_in = 3
        data_in = 16'h0004; #10; // data_in = 4
        data_in = 16'h0005; #10; // data_in = 5
        data_in = 16'h0006; #10; // data_in = 6

        // Finish simulation
        $finish;
    end

    // Monitor output data
    initial begin
        $monitor("At time %t, data_in = %h, data_out = %h", $time, data_in, data_out);
    end

endmodule
OUTPUT
At time 10, data_in = 0001, data_out = 1000
At time 20, data_in = 0002, data_out = 2000
At time 30, data_in = 0003, data_out = 3000
At time 40, data_in = 0004, data_out = 4000
At time 50, data_in = 0005, data_out = 5000
At time 60, data_in = 0006, data_out = 6000


